// automatically generated by Xtext
grammar at.ac.tuwien.big.Stl with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/Stl"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

System returns System:
	'system' name=ID '{'
	(itemTypes+=ItemType)*
	(areas+=Area)*
	'}';
	
Area returns Area:
	'area' name=ID '{'
		(components+=Component)*
		(connectors+=Connector)*
	'}'
;

ItemType returns ItemType:
	'item' name=ID '=' description=EString
;

Connector returns Connector:
	entry=[Slot|QualifiedName] '>' exit=[Slot|QualifiedName]
;

Component returns Component:
	ItemGenerator | Store | Buffer | Conveyor | Machine | TurnTable
;

Service returns Service:
	('service' name=ID '(cost='cost=EInt',reliability='reliability=EDouble',processingTime='processingTime=EInt')') |
	('service' name=ID '(cost='cost=EInt',reliability='reliability=EDouble',processingTime='processingTime=EInt'){'
		(parameters+=Parameter)+
	'}')
;

Parameter returns Parameter:
	'input' name=ID
;

Slot returns Slot:
	name=ID ':' requiredType=[ItemType|QualifiedName]
;

ItemGenerator returns ItemGenerator:
	'generator' name=ID 'generates' generatedType=[ItemType|QualifiedName] '(cost='cost=EInt'){'
		'output' outputSlots+=Slot
		(services+=Service)*
	'}'
;

Store returns Store:
	ProductStore | WasteStore
;

ProductStore returns ProductStore:
	'productStore' name=ID '(cost='cost=EInt',capacity='capacity=EInt'){'
		'input' inputSlots+=Slot
		(services+=Service)*
	'}'
;

WasteStore returns WasteStore:
	'wasteStore' name=ID '(cost='cost=EInt',capacity='capacity=EInt'){'
		'input' inputSlots+=Slot
		(services+=Service)*
	'}'
;

Buffer returns Buffer:
	'buffer' name=ID '(cost='cost=EInt'){'
		'input' inputSlots+=Slot
		'output' outputSlots+=Slot
		(services+=Service)*
	'}'
;

Conveyor returns Conveyor:
	'conveyor' name=ID '(cost='cost=EInt'){'
		'input' inputSlots+=Slot
		'output' outputSlots+=Slot
		(services+=Service)*
	'}'
;

Machine returns Machine:
	'machine' name=ID '(cost='cost=EInt'){'
		('input' inputSlots+=Slot)+
		('output' outputSlots+=Slot)+
		(services+=Service)*
	'}' 
;

TurnTable returns TurnTable:
	'turntable' name=ID '(cost='cost=EInt'){'
		('input' inputSlots+=Slot)+
		('output' outputSlots+=Slot)+
		(services+=Service)*
	'}' 
;

QualifiedName returns ecore::EString:
	ID (=> '.' ID)*;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;
